/*
 * Copyright (c) 2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

#include <stdio.h>
#include <fcntl.h>
#include <sys/mman.h>

void * ptr;
int fd;
int mem_size = 65535;
int num_captured_words = 2048;

void write_mem(int offset, int data) {
	*((int *)((volatile char*)ptr + offset)) = data;
}

int read_mem(int offset) {
	return *(int *)((volatile char*)ptr + offset);
}


void * get_ptr(){

	fd = open ("/dev/uio6", O_RDWR);
	if (fd < 1) {
		//cerr << "Could not open /dev/mem" << endl;
		return (void *) 0;
	}
	//int size_in_k = 64;
	// handle page alignment
	//int size = size_in_k * 1024;
	//int page_size = sysconf(_SC_PAGESIZE);
	//int page_bound_lower = page_size * (base_address / page_size);  // round down base_adress to next page boundary
	//int page_bound_upper = page_size * (1 + (base_address + size) / page_size); // round up base_adress to next page boundary
	//int page_bound_upper = page_size * ( (base_address + size) / page_size); // round up base_address to next page boundary
	//page_offset = base_address % page_size;
	//mem_size = page_bound_upper - page_bound_lower;

	// map memory
	void * ptr = mmap(NULL, mem_size, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0);
	if (ptr == MAP_FAILED) {
		//cerr << "Could not map memory" << endl;
		return (void * ) 0;
	}

	return ptr;
}

// --------------------------------------------------------------------------------------------------
// Send a capture command to the axis_capture_rf block located in capture-test.xprj Vivado project
// --------------------------------------------------------------------------------------------------
void capture() {
	write_mem(0x0,0x00000002); 	// stops ongoing capture, if it is running (clear capture start and clear busy bit = resets module:execution is required, if the module is stuck (e.g. because a capture has been started which cannot be finished, because there is no valid data to capture))
	write_mem(0x0,0x00000000);  	// capture starts on rising edge of bit 0 in reg 0
	write_mem(0x0,0x00000001);
}

// --------------------------------------------------------------------------------------------------
// Read 2048 x 32 bits decimal signed integers from the axis_capture_rf block located in capture-test.xprj Vivado project
// --------------------------------------------------------------------------------------------------
int read2048(int *data_array) {

	if (read_mem(0x04) == 1)
		return -2; // capture module is busy and should not be read

	int check_address;
	int timeout_counter_;
	for (int i=0; i < num_captured_words_; i++) {
		timeout_counter_ = 0;

		write_mem(0x14, i);  // request address for read

		do {
			check_address = data_capture_core_ -> read(0x18);
			timeout_counter_++;
		}
		while ( (check_address != i) && (timeout_counter_ < 1000) ); // wait until address is applied

		if (timeout_counter_ == 1000){
			return -1;
		}
		data_array[i] = data_capture_core_ -> read(0x10);
	}

	return 0;
}



int main()
{
    printf("Hello World\n");
    ptr = get_ptr();






    if (ptr != NULL)
    	munmap ((void *)ptr, mem_size);
    if(fd >0)
    	close(fd);	// close device file
    return 0;
}
