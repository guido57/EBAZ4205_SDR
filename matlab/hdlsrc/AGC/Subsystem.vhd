-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\AGC\Subsystem.vhd
-- Created: 2022-12-17 21:13:58
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.08333e-05
-- Target subsystem base rate: 2.08333e-05
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- y                             ce_out        2.08333e-05
-- Out2                          ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem
-- Source Path: AGC/Subsystem
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Subsystem IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        In1                               :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        ce_out                            :   OUT   std_logic;
        y                                 :   OUT   std_logic_vector(21 DOWNTO 0);  -- sfix22
        Out2                              :   OUT   std_logic_vector(13 DOWNTO 0)  -- ufix14
        );
END Subsystem;


ARCHITECTURE rtl OF Subsystem IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL In1_signed                       : signed(31 DOWNTO 0);  -- int32
  SIGNAL Threshold_2_14_out1              : signed(31 DOWNTO 0);  -- int32
  SIGNAL alpha1_dL_out1                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL alpha1_dL_out1_dtc               : signed(7 DOWNTO 0);  -- int8
  SIGNAL alpha1_dH_out1                   : signed(15 DOWNTO 0);  -- int16
  SIGNAL alpha1_dH_out1_dtc               : signed(7 DOWNTO 0);  -- int8
  SIGNAL Never_go_to_0_out1               : signed(15 DOWNTO 0);  -- int16
  SIGNAL Gain_out1                        : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Delay1_out1                      : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL Bit_Shift1_out1                  : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL Delay_out1                       : signed(21 DOWNTO 0);  -- sfix22
  SIGNAL Abs_y                            : signed(22 DOWNTO 0);  -- sfix23
  SIGNAL Abs_out1                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL Subtract_sub_temp                : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Subtract_out1                    : signed(31 DOWNTO 0);  -- int32
  SIGNAL Sign_out1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Switch_out1                      : signed(7 DOWNTO 0);  -- int8
  SIGNAL Gain_stage2_add_cast             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Gain_stage2_add_temp             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Gain_op_stage1                   : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL Gain_stage3_add_temp             : signed(31 DOWNTO 0);  -- sfix32
  SIGNAL Amplif_Atten_cast                : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL Amplif_Atten_mul_temp            : signed(46 DOWNTO 0);  -- sfix47
  SIGNAL Amplif_Atten_cast_1              : signed(45 DOWNTO 0);  -- sfix46
  SIGNAL Amplif_Atten_out1                : signed(21 DOWNTO 0);  -- sfix22

BEGIN
  In1_signed <= signed(In1);

  enb <= clk_enable;

  Threshold_2_14_out1 <= to_signed(1024, 32);

  alpha1_dL_out1 <= to_signed(16#0002#, 16);

  
  alpha1_dL_out1_dtc <= "01111111" WHEN (alpha1_dL_out1(15) = '0') AND (alpha1_dL_out1(14 DOWNTO 7) /= "00000000") ELSE
      "10000000" WHEN (alpha1_dL_out1(15) = '1') AND (alpha1_dL_out1(14 DOWNTO 7) /= "11111111") ELSE
      alpha1_dL_out1(7 DOWNTO 0);

  alpha1_dH_out1 <= to_signed(-16#0008#, 16);

  
  alpha1_dH_out1_dtc <= "01111111" WHEN (alpha1_dH_out1(15) = '0') AND (alpha1_dH_out1(14 DOWNTO 7) /= "00000000") ELSE
      "10000000" WHEN (alpha1_dH_out1(15) = '1') AND (alpha1_dH_out1(14 DOWNTO 7) /= "11111111") ELSE
      alpha1_dH_out1(7 DOWNTO 0);

  Never_go_to_0_out1 <= to_signed(16#0000#, 16);

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_unsigned(16#0001#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Gain_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(16#000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Bit_Shift1_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Abs_y <=  - (resize(Delay_out1, 23)) WHEN Delay_out1 < to_signed(16#000000#, 22) ELSE
      resize(Delay_out1, 23);
  Abs_out1 <= resize(Abs_y, 32);

  Subtract_sub_temp <= resize(Abs_out1, 33) - resize(Threshold_2_14_out1, 33);
  
  Subtract_out1 <= X"7FFFFFFF" WHEN (Subtract_sub_temp(32) = '0') AND (Subtract_sub_temp(31) /= '0') ELSE
      X"80000000" WHEN (Subtract_sub_temp(32) = '1') AND (Subtract_sub_temp(31) /= '1') ELSE
      Subtract_sub_temp(31 DOWNTO 0);

  
  Sign_out1 <= to_signed(1, 32) WHEN Subtract_out1 > to_signed(0, 32) ELSE
      to_signed(-1, 32) WHEN Subtract_out1 < to_signed(0, 32) ELSE
      to_signed(0, 32);

  
  switch_compare_1 <= '1' WHEN Sign_out1 > to_signed(0, 32) ELSE
      '0';

  
  Switch_out1 <= alpha1_dL_out1_dtc WHEN switch_compare_1 = '0' ELSE
      alpha1_dH_out1_dtc;

  Gain_stage2_add_cast <= signed(resize(Delay1_out1, 32));
  Gain_stage2_add_temp <= resize(Switch_out1, 32) + Gain_stage2_add_cast;
  
  Gain_op_stage1 <= "011111111111111" WHEN (Gain_stage2_add_temp(31) = '0') AND (Gain_stage2_add_temp(30 DOWNTO 14) /= "00000000000000000") ELSE
      "100000000000000" WHEN (Gain_stage2_add_temp(31) = '1') AND (Gain_stage2_add_temp(30 DOWNTO 14) /= "11111111111111111") ELSE
      Gain_stage2_add_temp(14 DOWNTO 0);

  Gain_stage3_add_temp <= resize(Gain_op_stage1, 32) + resize(Never_go_to_0_out1, 32);
  
  Gain_out1 <= "11111111111111" WHEN (Gain_stage3_add_temp(31) = '0') AND (Gain_stage3_add_temp(30 DOWNTO 14) /= "00000000000000000") ELSE
      "00000000000000" WHEN Gain_stage3_add_temp(31) = '1' ELSE
      unsigned(Gain_stage3_add_temp(13 DOWNTO 0));

  Amplif_Atten_cast <= signed(resize(Gain_out1, 15));
  Amplif_Atten_mul_temp <= In1_signed * Amplif_Atten_cast;
  Amplif_Atten_cast_1 <= Amplif_Atten_mul_temp(45 DOWNTO 0);
  
  Amplif_Atten_out1 <= "0111111111111111111111" WHEN (Amplif_Atten_cast_1(45) = '0') AND (Amplif_Atten_cast_1(44 DOWNTO 21) /= X"000000") ELSE
      "1000000000000000000000" WHEN (Amplif_Atten_cast_1(45) = '1') AND (Amplif_Atten_cast_1(44 DOWNTO 21) /= X"FFFFFF") ELSE
      Amplif_Atten_cast_1(21 DOWNTO 0);

  Bit_Shift1_out1 <= SHIFT_RIGHT(Amplif_Atten_out1, 10);

  y <= std_logic_vector(Bit_Shift1_out1);

  Out2 <= std_logic_vector(Gain_out1);

  ce_out <= clk_enable;

END rtl;

