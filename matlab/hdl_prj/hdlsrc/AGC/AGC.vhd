-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\AGC\AGC.vhd
-- Created: 2022-12-18 22:16:23
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 2.08333e-05
-- Target subsystem base rate: 2.08333e-05
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- output_32_bit                 ce_out        2.08333e-05
-- gain_unsigned_16_bit          ce_out        2.08333e-05
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: AGC
-- Source Path: AGC/AGC
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY AGC IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        input_32_bit                      :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        Decay_32_bit                      :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        Attack_32_bit                     :   IN    std_logic_vector(31 DOWNTO 0);  -- int32
        ce_out                            :   OUT   std_logic;
        output_32_bit                     :   OUT   std_logic_vector(39 DOWNTO 0);  -- sfix40
        gain_unsigned_16_bit              :   OUT   std_logic_vector(15 DOWNTO 0)  -- uint16
        );
END AGC;


ARCHITECTURE rtl OF AGC IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL input_32_bit_signed              : signed(31 DOWNTO 0);  -- int32
  SIGNAL Threshold_2_30_out1              : signed(31 DOWNTO 0);  -- int32
  SIGNAL Attack_32_bit_signed             : signed(31 DOWNTO 0);  -- int32
  SIGNAL Decay_32_bit_signed              : signed(31 DOWNTO 0);  -- int32
  SIGNAL Bit_Shift1_out1                  : signed(39 DOWNTO 0);  -- sfix40
  SIGNAL Delay_out1                       : signed(39 DOWNTO 0);  -- sfix40
  SIGNAL Abs_y                            : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL Abs_out1                         : signed(31 DOWNTO 0);  -- int32
  SIGNAL Subtract_sub_temp                : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Subtract_out1                    : signed(31 DOWNTO 0);  -- int32
  SIGNAL Sign_out1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL switch_compare_1                 : std_logic;
  SIGNAL Switch_out1                      : signed(31 DOWNTO 0);  -- int32
  SIGNAL Gain_unsigned_16_bit_out1        : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Delay1_out1                      : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Gain_unsigned_16_bit_add_cast    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Gain_unsigned_16_bit_add_temp    : signed(32 DOWNTO 0);  -- sfix33
  SIGNAL Amplifier_40_bit_cast            : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL Amplifier_40_bit_mul_temp        : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL Amplifier_40_bit_cast_1          : signed(47 DOWNTO 0);  -- sfix48
  SIGNAL Amplifier_40_bit_out1            : signed(39 DOWNTO 0);  -- sfix40

BEGIN
  input_32_bit_signed <= signed(input_32_bit);

  enb <= clk_enable;

  Threshold_2_30_out1 <= to_signed(600000000, 32);

  Attack_32_bit_signed <= signed(Attack_32_bit);

  Decay_32_bit_signed <= signed(Decay_32_bit);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= to_signed(0, 40);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= Bit_Shift1_out1;
      END IF;
    END IF;
  END PROCESS Delay_process;


  
  Abs_y <=  - (resize(Delay_out1, 41)) WHEN Delay_out1 < to_signed(0, 40) ELSE
      resize(Delay_out1, 41);
  
  Abs_out1 <= X"7FFFFFFF" WHEN (Abs_y(40) = '0') AND (Abs_y(39 DOWNTO 31) /= "000000000") ELSE
      X"80000000" WHEN (Abs_y(40) = '1') AND (Abs_y(39 DOWNTO 31) /= "111111111") ELSE
      Abs_y(31 DOWNTO 0);

  Subtract_sub_temp <= resize(Abs_out1, 33) - resize(Threshold_2_30_out1, 33);
  
  Subtract_out1 <= X"7FFFFFFF" WHEN (Subtract_sub_temp(32) = '0') AND (Subtract_sub_temp(31) /= '0') ELSE
      X"80000000" WHEN (Subtract_sub_temp(32) = '1') AND (Subtract_sub_temp(31) /= '1') ELSE
      Subtract_sub_temp(31 DOWNTO 0);

  
  Sign_out1 <= to_signed(1, 32) WHEN Subtract_out1 > to_signed(0, 32) ELSE
      to_signed(-1, 32) WHEN Subtract_out1 < to_signed(0, 32) ELSE
      to_signed(0, 32);

  
  switch_compare_1 <= '1' WHEN Sign_out1 > to_signed(0, 32) ELSE
      '0';

  
  Switch_out1 <= Attack_32_bit_signed WHEN switch_compare_1 = '0' ELSE
      Decay_32_bit_signed;

  Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay1_out1 <= to_unsigned(16#0001#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay1_out1 <= Gain_unsigned_16_bit_out1;
      END IF;
    END IF;
  END PROCESS Delay1_process;


  Gain_unsigned_16_bit_add_cast <= signed(resize(Delay1_out1, 33));
  Gain_unsigned_16_bit_add_temp <= Gain_unsigned_16_bit_add_cast + resize(Switch_out1, 33);
  
  Gain_unsigned_16_bit_out1 <= X"FFFF" WHEN (Gain_unsigned_16_bit_add_temp(32) = '0') AND (Gain_unsigned_16_bit_add_temp(31 DOWNTO 16) /= X"0000") ELSE
      X"0000" WHEN Gain_unsigned_16_bit_add_temp(32) = '1' ELSE
      unsigned(Gain_unsigned_16_bit_add_temp(15 DOWNTO 0));

  Amplifier_40_bit_cast <= signed(resize(Gain_unsigned_16_bit_out1, 17));
  Amplifier_40_bit_mul_temp <= input_32_bit_signed * Amplifier_40_bit_cast;
  Amplifier_40_bit_cast_1 <= Amplifier_40_bit_mul_temp(47 DOWNTO 0);
  
  Amplifier_40_bit_out1 <= X"7FFFFFFFFF" WHEN (Amplifier_40_bit_cast_1(47) = '0') AND (Amplifier_40_bit_cast_1(46 DOWNTO 39) /= "00000000") ELSE
      X"8000000000" WHEN (Amplifier_40_bit_cast_1(47) = '1') AND (Amplifier_40_bit_cast_1(46 DOWNTO 39) /= "11111111") ELSE
      Amplifier_40_bit_cast_1(39 DOWNTO 0);

  Bit_Shift1_out1 <= SHIFT_RIGHT(Amplifier_40_bit_out1, 8);

  output_32_bit <= std_logic_vector(Bit_Shift1_out1);

  gain_unsigned_16_bit <= std_logic_vector(Gain_unsigned_16_bit_out1);

  ce_out <= clk_enable;

END rtl;

