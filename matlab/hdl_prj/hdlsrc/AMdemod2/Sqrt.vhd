-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\AMdemod2\Sqrt.vhd
-- Created: 2022-12-23 10:47:15
-- 
-- Generated by MATLAB 9.10 and HDL Coder 3.18
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Sqrt
-- Source Path: AMdemod2/AM Demodulator/Sqrt
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.AM_Demodulator_pkg.ALL;

ENTITY Sqrt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb_1_48000_0                     :   IN    std_logic;
        din                               :   IN    std_logic_vector(15 DOWNTO 0);  -- int16
        dout                              :   OUT   std_logic_vector(7 DOWNTO 0)  -- int8
        );
END Sqrt;


ARCHITECTURE rtl OF Sqrt IS

  -- Signals
  SIGNAL Root_Square0_temp1               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL din_signed                       : signed(15 DOWNTO 0);  -- int16
  SIGNAL resizedin                        : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL din_temp_0                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL relop_relop1                     : std_logic;
  SIGNAL root_0_temp0                     : std_logic;  -- ufix1
  SIGNAL root_0_temp1                     : std_logic;  -- ufix1
  SIGNAL Root_0                           : std_logic;  -- ufix1
  SIGNAL currentRoot1_p                   : std_logic;  -- ufix1
  SIGNAL Root_Square0_temp0               : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Root_Square0                     : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL currentRoot_Square1_p            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL constant_01                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend1          : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL constant_01_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend1                 : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL adder_add_temp                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Root_Square1_temp1               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL resizedin1_p                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL din_temp_1                       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL relop_relop1_1                   : std_logic;
  SIGNAL Root_1                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL currentRoot2_p                   : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Root_Square1_temp0               : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Root_Square1                     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL currentRoot_Square2_p            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL constant_02                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend2          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL constant_02_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend2                 : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL adder_add_temp_1                 : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Root_Square2_temp1               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL resizedin2_p                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL din_temp_2                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL relop_relop1_2                   : std_logic;
  SIGNAL Root_2                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL currentRoot3_p                   : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Root_Square2_temp0               : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Root_Square2                     : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL currentRoot_Square3_p            : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL constant_03                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend3          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL constant_03_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend3                 : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL adder_add_temp_2                 : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Root_Square3_temp1               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL resizedin3_p                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL din_temp_3                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL relop_relop1_3                   : std_logic;
  SIGNAL Root_3                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL currentRoot4_p                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL Root_Square3_temp0               : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL Root_Square3                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL currentRoot_Square4_p            : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL constant_04                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend4          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL constant_04_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend4                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL adder_add_temp_3                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Root_Square4_temp1               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL resizedin4_p                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL din_temp_4                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL relop_relop1_4                   : std_logic;
  SIGNAL Root_4                           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL currentRoot5_p                   : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Root_Square4_temp0               : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL Root_Square4                     : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL currentRoot_Square5_p            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL constant_05                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend5          : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL constant_05_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend5                 : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL adder_add_temp_4                 : unsigned(12 DOWNTO 0);  -- ufix13
  SIGNAL Root_Square5_temp1               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL resizedin5_p                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL din_temp_5                       : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL relop_relop1_5                   : std_logic;
  SIGNAL Root_5                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL currentRoot6_p                   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Root_Square5_temp0               : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL Root_Square5                     : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL currentRoot_Square6_p            : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL constant_06                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_Square_extend6          : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL constant_06_1                    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL prevRoot_extend6                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL adder_add_temp_5                 : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL Root_Square6_temp1               : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL resizedin6_p                     : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL din_temp_6                       : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL relop_relop1_6                   : std_logic;
  SIGNAL Root_6                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL currentRoot7_p                   : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL prevRoot_p2_reg                  : vector_of_unsigned7(0 TO 1);  -- ufix7 [2]
  SIGNAL prevRoot_p_2                     : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL outdata_1                        : signed(7 DOWNTO 0);  -- int8

BEGIN
  -- Sqrt Implementation using Shift

  Root_Square0_temp1 <= to_unsigned(16#1#, 2);

  din_signed <= signed(din);

  
  resizedin <= X"0000" WHEN din_signed(15) = '1' ELSE
      unsigned(din_signed);

  din_temp_0 <= resizedin(13 DOWNTO 12);

  
  relop_relop1 <= '1' WHEN Root_Square0_temp1 <= din_temp_0 ELSE
      '0';

  root_0_temp0 <= '0';

  root_0_temp1 <= '1';

  
  Root_0 <= root_0_temp0 WHEN relop_relop1 = '0' ELSE
      root_0_temp1;

  root_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot1_p <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot1_p <= Root_0;
      END IF;
    END IF;
  END PROCESS root_reg_process;


  Root_Square0_temp0 <= to_unsigned(16#0#, 2);

  
  Root_Square0 <= Root_Square0_temp0 WHEN relop_relop1 = '0' ELSE
      Root_Square0_temp1;

  root_sq_p_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square1_p <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot_Square1_p <= Root_Square0;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_process;


  constant_01 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend1 <= currentRoot_Square1_p & constant_01;

  constant_01_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend1 <= currentRoot1_p & constant_01_1;

  adder_add_temp <= resize(prevRoot_Square_extend1, 5) + resize(prevRoot_extend1, 5);
  
  Root_Square1_temp1 <= "1111" WHEN adder_add_temp(4) /= '0' ELSE
      adder_add_temp(3 DOWNTO 0);

  resizedin_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin1_p <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        resizedin1_p <= resizedin;
      END IF;
    END IF;
  END PROCESS resizedin_reg_process;


  din_temp_1 <= resizedin1_p(13 DOWNTO 10);

  
  relop_relop1_1 <= '1' WHEN Root_Square1_temp1 <= din_temp_1 ELSE
      '0';

  Root_1 <= unsigned'(currentRoot1_p & relop_relop1_1);

  root_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot2_p <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot2_p <= Root_1;
      END IF;
    END IF;
  END PROCESS root_reg_1_process;


  Root_Square1_temp0 <= currentRoot_Square1_p & constant_01_1;

  
  Root_Square1 <= Root_Square1_temp0 WHEN relop_relop1_1 = '0' ELSE
      Root_Square1_temp1;

  root_sq_p_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square2_p <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot_Square2_p <= Root_Square1;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_1_process;


  constant_02 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend2 <= currentRoot_Square2_p & constant_02;

  constant_02_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend2 <= currentRoot2_p & constant_02_1;

  adder_add_temp_1 <= resize(prevRoot_Square_extend2, 7) + resize(prevRoot_extend2, 7);
  
  Root_Square2_temp1 <= "111111" WHEN adder_add_temp_1(6) /= '0' ELSE
      adder_add_temp_1(5 DOWNTO 0);

  resizedin_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin2_p <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        resizedin2_p <= resizedin1_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_1_process;


  din_temp_2 <= resizedin2_p(13 DOWNTO 8);

  
  relop_relop1_2 <= '1' WHEN Root_Square2_temp1 <= din_temp_2 ELSE
      '0';

  Root_2 <= currentRoot2_p & relop_relop1_2;

  root_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot3_p <= to_unsigned(16#0#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot3_p <= Root_2;
      END IF;
    END IF;
  END PROCESS root_reg_2_process;


  Root_Square2_temp0 <= currentRoot_Square2_p & constant_02_1;

  
  Root_Square2 <= Root_Square2_temp0 WHEN relop_relop1_2 = '0' ELSE
      Root_Square2_temp1;

  root_sq_p_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square3_p <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot_Square3_p <= Root_Square2;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_2_process;


  constant_03 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend3 <= currentRoot_Square3_p & constant_03;

  constant_03_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend3 <= currentRoot3_p & constant_03_1;

  adder_add_temp_2 <= resize(prevRoot_Square_extend3, 9) + resize(prevRoot_extend3, 9);
  
  Root_Square3_temp1 <= "11111111" WHEN adder_add_temp_2(8) /= '0' ELSE
      adder_add_temp_2(7 DOWNTO 0);

  resizedin_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin3_p <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        resizedin3_p <= resizedin2_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_2_process;


  din_temp_3 <= resizedin3_p(13 DOWNTO 6);

  
  relop_relop1_3 <= '1' WHEN Root_Square3_temp1 <= din_temp_3 ELSE
      '0';

  Root_3 <= currentRoot3_p & relop_relop1_3;

  root_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot4_p <= to_unsigned(16#0#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot4_p <= Root_3;
      END IF;
    END IF;
  END PROCESS root_reg_3_process;


  Root_Square3_temp0 <= currentRoot_Square3_p & constant_03_1;

  
  Root_Square3 <= Root_Square3_temp0 WHEN relop_relop1_3 = '0' ELSE
      Root_Square3_temp1;

  root_sq_p_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square4_p <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot_Square4_p <= Root_Square3;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_3_process;


  constant_04 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend4 <= currentRoot_Square4_p & constant_04;

  constant_04_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend4 <= currentRoot4_p & constant_04_1;

  adder_add_temp_3 <= resize(prevRoot_Square_extend4, 11) + resize(prevRoot_extend4, 11);
  
  Root_Square4_temp1 <= "1111111111" WHEN adder_add_temp_3(10) /= '0' ELSE
      adder_add_temp_3(9 DOWNTO 0);

  resizedin_reg_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin4_p <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        resizedin4_p <= resizedin3_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_3_process;


  din_temp_4 <= resizedin4_p(13 DOWNTO 4);

  
  relop_relop1_4 <= '1' WHEN Root_Square4_temp1 <= din_temp_4 ELSE
      '0';

  Root_4 <= currentRoot4_p & relop_relop1_4;

  root_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot5_p <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot5_p <= Root_4;
      END IF;
    END IF;
  END PROCESS root_reg_4_process;


  Root_Square4_temp0 <= currentRoot_Square4_p & constant_04_1;

  
  Root_Square4 <= Root_Square4_temp0 WHEN relop_relop1_4 = '0' ELSE
      Root_Square4_temp1;

  root_sq_p_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square5_p <= to_unsigned(16#000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot_Square5_p <= Root_Square4;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_4_process;


  constant_05 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend5 <= currentRoot_Square5_p & constant_05;

  constant_05_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend5 <= currentRoot5_p & constant_05_1;

  adder_add_temp_4 <= resize(prevRoot_Square_extend5, 13) + resize(prevRoot_extend5, 13);
  
  Root_Square5_temp1 <= "111111111111" WHEN adder_add_temp_4(12) /= '0' ELSE
      adder_add_temp_4(11 DOWNTO 0);

  resizedin_reg_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin5_p <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        resizedin5_p <= resizedin4_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_4_process;


  din_temp_5 <= resizedin5_p(13 DOWNTO 2);

  
  relop_relop1_5 <= '1' WHEN Root_Square5_temp1 <= din_temp_5 ELSE
      '0';

  Root_5 <= currentRoot5_p & relop_relop1_5;

  root_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot6_p <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot6_p <= Root_5;
      END IF;
    END IF;
  END PROCESS root_reg_5_process;


  Root_Square5_temp0 <= currentRoot_Square5_p & constant_05_1;

  
  Root_Square5 <= Root_Square5_temp0 WHEN relop_relop1_5 = '0' ELSE
      Root_Square5_temp1;

  root_sq_p_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot_Square6_p <= to_unsigned(16#000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot_Square6_p <= Root_Square5;
      END IF;
    END IF;
  END PROCESS root_sq_p_reg_5_process;


  constant_06 <= to_unsigned(16#1#, 2);

  prevRoot_Square_extend6 <= currentRoot_Square6_p & constant_06;

  constant_06_1 <= to_unsigned(16#0#, 2);

  prevRoot_extend6 <= currentRoot6_p & constant_06_1;

  adder_add_temp_5 <= resize(prevRoot_Square_extend6, 15) + resize(prevRoot_extend6, 15);
  
  Root_Square6_temp1 <= "11111111111111" WHEN adder_add_temp_5(14) /= '0' ELSE
      adder_add_temp_5(13 DOWNTO 0);

  resizedin_reg_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      resizedin6_p <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        resizedin6_p <= resizedin5_p;
      END IF;
    END IF;
  END PROCESS resizedin_reg_5_process;


  din_temp_6 <= resizedin6_p(13 DOWNTO 0);

  
  relop_relop1_6 <= '1' WHEN Root_Square6_temp1 <= din_temp_6 ELSE
      '0';

  Root_6 <= currentRoot6_p & relop_relop1_6;

  root_reg_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      currentRoot7_p <= to_unsigned(16#00#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        currentRoot7_p <= Root_6;
      END IF;
    END IF;
  END PROCESS root_reg_6_process;


  prevRoot_p2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      prevRoot_p2_reg <= (OTHERS => to_unsigned(16#00#, 7));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb_1_48000_0 = '1' THEN
        prevRoot_p2_reg(0) <= currentRoot7_p;
        prevRoot_p2_reg(1) <= prevRoot_p2_reg(0);
      END IF;
    END IF;
  END PROCESS prevRoot_p2_process;

  prevRoot_p_2 <= prevRoot_p2_reg(1);

  outdata_1 <= signed(resize(prevRoot_p_2, 8));

  dout <= std_logic_vector(outdata_1);

END rtl;

